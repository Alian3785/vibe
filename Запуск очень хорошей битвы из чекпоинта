# ============================================================
# –¢–ï–°–¢ –° –õ–û–ì–ê–ú–ò –ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ï–ô –ò–ó –ß–ï–ö–ü–û–ò–ù–¢–ê
# ============================================================

import os, re, time, math
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import patches
from matplotlib.patches import FancyArrowPatch
from IPython.display import display
from stable_baselines3 import PPO

# –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —á–µ–∫–ø–æ–∏–Ω—Ç—É (–ø—Ä–∏–º–µ—Ä: "./checkpoints/<run_id>/ppo_step_1000000.zip")
CHECKPOINT_PATH = "./checkpoints/PUT_YOUR_RUN_ID/ppo_step_1000000.zip"
assert os.path.exists(CHECKPOINT_PATH), f"–ù–µ –Ω–∞–π–¥–µ–Ω —á–µ–∫–ø–æ–∏–Ω—Ç: {CHECKPOINT_PATH}"

eval_env = Monitor(BattleEnv(log_enabled=False))
ckpt_model = PPO.load(CHECKPOINT_PATH, env=eval_env, device="auto")

test_env_ckpt = BattleEnv(log_enabled=True)
obs, info = test_env_ckpt.reset(seed=42 + 999)

all_logs_ckpt = []
all_logs_ckpt += test_env_ckpt.pop_pretty_events()

done = False
total_reward = 0.0
step_i = 0
while not done:
    step_i += 1
    action, _ = ckpt_model.predict(obs, deterministic=True)

    target_pos = TARGET_POSITIONS[int(action)]
    chosen_line = f"[CKPT STEP {step_i}] –ê–≥–µ–Ω—Ç –≤—ã–±–∏—Ä–∞–µ—Ç action={int(action)} ‚Üí –∞—Ç–∞–∫–∞ RED pos{target_pos}"
    print("\n" + chosen_line)
    all_logs_ckpt.append(chosen_line)

    obs, reward, terminated, truncated, info = test_env_ckpt.step(action)
    total_reward += reward
    done = terminated or truncated

    new_lines = test_env_ckpt.pop_pretty_events()
    all_logs_ckpt += new_lines
    for line in new_lines:
        print(line)

print("\n=== –≠–ü–ò–ó–û–î (–ß–ï–ö–ü–û–ò–ù–¢) –ó–ê–í–ï–†–®–Å–ù ===")
print("–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:", test_env_ckpt.winner.upper(), "| –°—É–º–º–∞—Ä–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞:", total_reward)

# ----------- –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Ö –∂–µ –ª–æ–≥–æ–≤ (–∏–¥–µ–Ω—Ç–∏—á–Ω–∞ –±–ª–æ–∫—É –≤—ã—à–µ, —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º HP-–±–∞—Ä–∞–º–∏) -----------
VISUALIZE = True
FRAME_DELAY = 0.28
if VISUALIZE:
    VISUAL_SPEED_MULT = 8.0

    RED_FRONT, RED_BACK   = [1,2,3],   [4,5,6]
    BLUE_FRONT, BLUE_BACK = [7,8,9],   [10,11,12]
    COL_X = {0: 0.18, 1: 0.50, 2: 0.82}
    Y_BLUE_BACK, Y_BLUE_FRONT = 0.88, 0.70
    Y_RED_FRONT,  Y_RED_BACK  = 0.30, 0.12
    SLOT_W, SLOT_H = 0.28, 0.13
    HP_H = 0.028

    state = {}
    def _suffix_by_type(t: str) -> str:
        return {
            "Mage": " (Mage)", "gargoil": " (Gargoil)", "–í–æ–∏–Ω": " (–≤–æ–∏–Ω)", "Demon": " (Demon)",
            "Death": " (Death)", "Archer": " (–ª—É—á–Ω–∏–∫)", "lord": " (Lord)", "Dead dragon": " (Dead dragon)",
        }.get(t, f" ({t})")

    for u in (UNITS_RED + UNITS_BLUE):
        t = u.get("Type", "Archer")
        start_hp = float(u["–ó–¥–æ—Ä–æ–≤—å–µ"])
        state[u["position"]] = {
            "team": u["team"],
            "name": u["–∏–º—è"] + _suffix_by_type(t),
            "hp": start_hp,
            "maxhp": start_hp,
            "stand": u["stand"],
            "type": t,
        }

    fig, ax = plt.subplots(figsize=(12, 8))
    plt.close(fig)
    handle = display(fig, display_id=True)

    def pos_to_xy(pos: int):
        col = (pos - 1) % 3
        x = COL_X[col] - SLOT_W/2
        if pos in BLUE_BACK:   y = Y_BLUE_BACK  - SLOT_H/2
        elif pos in BLUE_FRONT:y = Y_BLUE_FRONT - SLOT_H/2
        elif pos in RED_FRONT: y = Y_RED_FRONT  - SLOT_H/2
        else:                  y = Y_RED_BACK   - SLOT_H/2
        return x, y

    def pos_center(pos: int):
        x, y = pos_to_xy(pos)
        return x + SLOT_W/2, y + SLOT_H/2

    def draw_unit(ax, pos, is_active: bool = False):
        u = state[pos]; x, y = pos_to_xy(pos)
        card_color = (0.90, 0.30, 0.30, 0.16) if u["team"] == "red" else (0.30, 0.45, 0.90, 0.16)
        ax.add_patch(patches.FancyBboxPatch((x, y), SLOT_W, SLOT_H,
                                            boxstyle="round,pad=0.010,rounding_size=0.016",
                                            linewidth=1.3, edgecolor="black", facecolor=card_color))
        if is_active:
            ax.add_patch(patches.FancyBboxPatch(
                (x-0.01, y-0.01), SLOT_W+0.02, SLOT_H+0.02,
                boxstyle="round,pad=0.012,rounding_size=0.018",
                linewidth=3.0, edgecolor=(1.0, 0.82, 0.10), facecolor='none', alpha=0.95
            ))

        name = u["name"][:22]
        ax.text(x + 0.012, y + SLOT_H*0.78, name,
                fontsize=10, fontweight="bold", ha="left", va="center", color="black")

        hp_x, hp_y = x + 0.012, y + SLOT_H*0.10
        hp_w = SLOT_W - 0.024
        ax.add_patch(patches.Rectangle((hp_x, hp_y), hp_w, HP_H, facecolor=(0.88,0.88,0.88), edgecolor='none'))
        frac = max(0.0, min(1.0, u["hp"]/u["maxhp"])) if u["maxhp"] > 1e-9 else 0.0
        ax.add_patch(patches.Rectangle((hp_x, hp_y), hp_w*frac, HP_H, facecolor=(0.15,0.70,0.25), edgecolor='none'))
        ax.text(hp_x + hp_w/2, hp_y + HP_H/2, f"{int(max(0,u['hp']))}/{int(u['maxhp'])}",
                fontsize=9, ha="center", va="center", color="black")

        ax.text(x + SLOT_W/2, y - 0.008, f"pos{pos}", fontsize=8, ha="center", va="top", color=(0.2,0.2,0.2))

    def draw_attack_arrow(ax, src_pos:int, dst_pos:int, team:str,
                          text: str|None = None,
                          style: str = "solid",
                          color: tuple|None = None,
                          alpha: float = 0.95,
                          curve: float = 0.18,
                          lw: float = 2.6):
        sx, sy = pos_center(src_pos)
        dx, dy = pos_center(dst_pos)
        vx, vy = dx - sx, dy - sy
        dist = math.hypot(vx, vy) + 1e-9
        pad = 0.06
        sx += vx/dist * pad; sy += vy/dist * pad
        dx -= vx/dist * pad; dy -= vy/dist * pad
        if color is None:
            color = (0.20, 0.35, 0.85) if team == "BLUE" else (0.85, 0.25, 0.25)
        con_style = f"arc3,rad={curve}" if abs(vx) > 0.01 and abs(vy) > 0.01 else "arc3,rad=0.0"
        arrow = FancyArrowPatch((sx, sy), (dx, dy),
                                arrowstyle="-|>", mutation_scale=14, linewidth=lw,
                                linestyle="--" if style == "dashed" else "solid",
                                color=color, alpha=alpha, connectionstyle=con_style)
        ax.add_patch(arrow)
        if text:
            mx, my = (sx + dx)/2, (sy + dy)/2
            ax.text(mx, my + 0.03, text, fontsize=10, fontweight="bold",
                    ha="center", va="center", color=color)

    atk_re           = re.compile(r'^(RED|BLUE)\s+[^#]+#(\d+)\s+‚Üí\s+(RED|BLUE)\s+[^#]+#(\d+):\s+(\d+)\s+\((\d+)‚Üí(\d+)\)')
    kill_re          = re.compile(r'^‚úñ\s+(RED|BLUE)\s+[^#]+#(\d+)\s+–≤—ã–≤–µ–¥–µ–Ω –∏–∑ —Å—Ç—Ä–æ—è\.')
    vict_re          = re.compile(r'^üèÜ –ü–æ–±–µ–¥–∞ (RED|BLUE)!')
    blue_turn_re     = re.compile(r'^–•–æ–¥ BLUE:\s+[^#]+#(\d+)')
    red_turn_re      = re.compile(r'^RED —Ö–æ–¥:\s+[^#]+#(\d+)')
    blue_action_re   = re.compile(r'^BLUE –¥–µ–π—Å—Ç–≤–∏–µ:\s+[^#]+#(\d+)\s+‚Üí\s+pos(\d+)')
    red_target_re    = re.compile(r'^RED —Ö–æ–¥:\s+[^#]+#(\d+).+—Ü–µ–ª—å pos(\d+)')
    mage_banner_re   = re.compile(r'^\w+\s+[^#]+#(\d+)\s+\((?:Mage|Dead dragon)\).+–º–∞—Å—Å–æ–≤')
    blue_cant_re     = re.compile(r'^BLUE\s+[^#]+#(\d+).+–Ω–µ –º–æ–∂–µ—Ç –¥–æ—Å—Ç–∞—Ç—å pos(\d+)')
    poison_tick_re   = re.compile(r'^‚ò† –Ø–¥ –ø–æ—Ä–∞–∂–∞–µ—Ç (RED|BLUE)\s+[^#]+#(\d+):\s+(\d+)\s+\((\d+)‚Üí(\d+)\)')
    burn_tick_re     = re.compile(r'^üî• –ü–æ–¥–∂–æ–≥ –ø–æ—Ä–∞–∂–∞–µ—Ç (RED|BLUE)\s+[^#]+#(\d+):\s+(\d+)\s+\((\d+)‚Üí(\d+)\)')
    immune_dmg_re    = re.compile(r'^üõ° –ò–º–º—É–Ω–∏—Ç–µ—Ç –∫ —É—Ä–æ–Ω—É')
    immune_stat_re   = re.compile(r'^üõ° –ò–º–º—É–Ω–∏—Ç–µ—Ç –∫ —ç—Ñ—Ñ–µ–∫—Ç—É')
    resist_re        = re.compile(r'^üßø –°—Ç–æ–π–∫–æ—Å—Ç—å')
    miss_re          = re.compile(r'^üí® –ü—Ä–æ–º–∞—Ö:\s+(RED|BLUE)\s+[^#]+#(\d+)\s+–ø–æ\s+(RED|BLUE)\s+[^#]+#(\d+)\.')

    def draw_board(arrows: list[dict] = None, headline: str = "", active_pos: int | None = None):
        ax.cla()
        ax.set_xlim(0, 1); ax.set_ylim(0, 1); ax.axis("off")
        ax.plot([0.02, 0.98], [0.50, 0.50], color=(0.6,0.6,0.6), lw=1.2, ls="--", alpha=0.7)
        ax.text(0.01, 0.96, "BLUE (top)", color=(0.2,0.35,0.8), fontsize=12, fontweight="bold", ha="left")
        ax.text(0.01, 0.04, "RED (bottom)", color=(0.8,0.25,0.25), fontsize=12, fontweight="bold", ha="left")

        for pos in BLUE_BACK + BLUE_FRONT + RED_FRONT + RED_BACK:
            draw_unit(ax, pos, is_active=(active_pos == pos))

        arrows = arrows or []
        for a in arrows:
            draw_attack_arrow(ax, a["src"], a["dst"], a["team"],
                              text=a.get("text"),
                              style=a.get("style","solid"),
                              color=a.get("color"),
                              alpha=a.get("alpha",0.95),
                              curve=a.get("curve",0.18),
                              lw=a.get("lw",2.6))

        if headline:
            ax.text(0.5, 0.52, headline[:120], fontsize=12, ha="center", va="bottom", color=(0.15,0.15,0.15))

        fig.canvas.draw(); handle.update(fig)

    current_actor_pos = None
    draw_board(headline="–ù–∞—á–∞–ª–æ –±–æ—è (—á–µ–∫–ø–æ–∏–Ω—Ç)", active_pos=current_actor_pos)

    last_selection = None
    for line in all_logs_ckpt:
        arrows_now = []
        headline = ""

        m = blue_turn_re.match(line)
        if m:
            current_actor_pos = int(m.group(1))
            headline = line
            draw_board(arrows_now, headline, active_pos=current_actor_pos); time.sleep((FRAME_DELAY * VISUAL_SPEED_MULT) / 1.05); continue

        m = red_turn_re.match(line)
        if m:
            current_actor_pos = int(m.group(1))
            headline = line
            draw_board(arrows_now, headline, active_pos=current_actor_pos); time.sleep((FRAME_DELAY * VISUAL_SPEED_MULT) / 1.05); continue

        m = atk_re.match(line)
        if m:
            atk_team = m.group(1); atk_pos = int(m.group(2))
            vic_pos = int(m.group(4)); dmg = int(m.group(5)); after = int(m.group(7))
            if vic_pos in state: state[vic_pos]["hp"] = after
            current_actor_pos = atk_pos
            arrows_now.append({"src": atk_pos, "dst": vic_pos, "team": atk_team, "text": f"-{dmg}"})
            headline = line
            draw_board(arrows_now, headline, active_pos=current_actor_pos); time.sleep(FRAME_DELAY * VISUAL_SPEED_MULT); continue

        m = poison_tick_re.match(line)
        if m:
            vic_pos = int(m.group(2)); after = int(m.group(5))
            if vic_pos in state: state[vic_pos]["hp"] = after
            headline = line
            draw_board([], headline, active_pos=current_actor_pos); time.sleep((FRAME_DELAY * VISUAL_SPEED_MULT) / 1.2); continue

        m = burn_tick_re.match(line)
        if m:
            vic_pos = int(m.group(2)); after = int(m.group(5))
            if vic_pos in state: state[vic_pos]["hp"] = after
            headline = line
            draw_board([], headline, active_pos=current_actor_pos); time.sleep((FRAME_DELAY * VISUAL_SPEED_MULT) / 1.2); continue

        m = blue_action_re.match(line)
        if m:
            src = int(m.group(1)); dst = int(m.group(2))
            last_selection = {"src": src, "dst": dst, "team": "BLUE"}
            current_actor_pos = src
            arrows_now.append({"src": src, "dst": dst, "team": "BLUE",
                               "style":"dashed", "alpha":0.65, "lw":2.0})
            headline = line
            draw_board(arrows_now, headline, active_pos=current_actor_pos); time.sleep((FRAME_DELAY * VISUAL_SPEED_MULT) / 1.1); continue

        m = red_target_re.match(line)
        if m:
            src = int(m.group(1)); dst = int(m.group(2))
            last_selection = {"src": src, "dst": dst, "team": "RED"}
            current_actor_pos = src
            arrows_now.append({"src": src, "dst": dst, "team": "RED",
                               "style":"dashed", "alpha":0.65, "lw":2.0})
            headline = line
            draw_board(arrows_now, headline, active_pos=current_actor_pos); time.sleep((FRAME_DELAY * VISUAL_SPEED_MULT) / 1.1); continue

        if re.match(r'^üõ° –ò–º–º—É–Ω–∏—Ç–µ—Ç –∫ —É—Ä–æ–Ω—É', line) or re.match(r'^üõ° –ò–º–º—É–Ω–∏—Ç–µ—Ç –∫ —ç—Ñ—Ñ–µ–∫—Ç—É', line) or re.match(r'^üßø –°—Ç–æ–π–∫–æ—Å—Ç—å', line):
            if last_selection:
                arrows_now.append({"src": last_selection["src"], "dst": last_selection["dst"],
                                   "team": last_selection["team"], "color": (0.45,0.45,0.45),
                                   "style":"solid", "alpha":0.9, "text":"RESIST"})
                current_actor_pos = last_selection["src"]
            headline = line
            draw_board(arrows_now, headline, active_pos=current_actor_pos); time.sleep((FRAME_DELAY * VISUAL_SPEED_MULT) / 1.2); continue

        m = blue_cant_re.match(line)
        if m:
            src = int(m.group(1)); dst = int(m.group(2))
            arrows_now.append({"src": src, "dst": dst, "team": "BLUE",
                               "color": (0.5,0.5,0.5), "style":"dashed", "alpha":0.9, "text":"–Ω–µ–¥–æ—Å—è–≥–∞–µ–º–æ"})
            current_actor_pos = src
            headline = line
            draw_board(arrows_now, headline, active_pos=current_actor_pos); time.sleep((FRAME_DELAY * VISUAL_SPEED_MULT) / 1.2); continue

        m = miss_re.match(line)
        if m:
            atk_team = m.group(1); atk_pos  = int(m.group(2)); vic_pos = int(m.group(4))
            current_actor_pos = atk_pos
            arrows_now.append({"src": atk_pos, "dst": vic_pos, "team": atk_team,
                               "color": (0.5,0.5,0.5), "style":"solid", "alpha":0.9, "text":"MISS"})
            headline = line
            draw_board(arrows_now, headline, active_pos=current_actor_pos); time.sleep((FRAME_DELAY * VISUAL_SPEED_MULT) / 1.15); continue

        m = kill_re.match(line)
        if m:
            pos = int(m.group(2))
            if pos in state: state[pos]["hp"] = 0
            headline = line
            draw_board([], headline, active_pos=current_actor_pos); time.sleep((FRAME_DELAY * VISUAL_SPEED_MULT) / 1.1); continue

        if mage_banner_re.match(line):
            headline = line
            draw_board([], headline, active_pos=current_actor_pos); time.sleep((FRAME_DELAY * VISUAL_SPEED_MULT) / 1.1); continue

        if vict_re.match(line):
            headline = line
            current_actor_pos = None
            draw_board([], headline, active_pos=current_actor_pos); time.sleep(FRAME_DELAY * VISUAL_SPEED_MULT); continue

        draw_board([], line, active_pos=current_actor_pos); time.sleep((FRAME_DELAY * VISUAL_SPEED_MULT) / 1.2)

    draw_board([], "–ö–æ–Ω–µ—Ü —ç–ø–∏–∑–æ–¥–∞ (—á–µ–∫–ø–æ–∏–Ω—Ç)", active_pos=None)
